
///  Highly divisible triangular number
///  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:
///  1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
///  Let us list the factors of the first seven triangle numbers:
///  1: 1
///  3: 1,3
///  6: 1,2,3,6
///  10: 1,2,5,10
///  15: 1,3,5,15
///  21: 1,3,7,21
///  28: 1,2,4,7,14,28
///  We can see that 28 is the first triangle number to have over five divisors.
///  What is the value of the first triangle number to have over five hundred divisors?

struct Triangular {
    curr_term: u64
}

impl Triangular {
    fn new() -> Triangular {
        Triangular {
            curr_term: 1
        }
    }
}

impl Iterator for Triangular {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        let sum = (1..=self.curr_term).sum();
        self.curr_term += 1;
        Some(sum)
    }
}

fn get_factors(n: u64) -> Vec<u64> {
    let mut factors = vec![1_u64, n];
    let sqrt_n = (n as f64).sqrt() as usize;
    for i in 2..=sqrt_n as u64 {
        if n % i == 0 {
            factors.push(i);
            if n / i != i {
                factors.push(n / i);
            }
        }
    }
    factors
}

fn main() {
    let mut triangulars = Triangular::new();
    // find the first triangular number that has over five hundred divisors
    let res = triangulars.find(|&n| get_factors(n).len() > 500);
    if let Some(num) = res {
        println!("res = {}", num);
    }

    // let res = loop {
    //     if let Some(n) = triangulars.next() {
    //         if get_factors(n).len() > 500 {
    //             break n;
    //         }
    //     }
    // };
    // println!("res = {}", res);
}