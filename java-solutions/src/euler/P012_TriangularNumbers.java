package euler;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.LongStream;
import java.util.stream.Stream;

///  Highly divisible triangular number
///  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:
///  1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
///  Let us list the factors of the first seven triangle numbers:
///  1: 1
///  3: 1,3
///  6: 1,2,3,6
///  10: 1,2,5,10
///  15: 1,3,5,15
///  21: 1,3,7,21
///  28: 1,2,4,7,14,28
///  We can see that 28 is the first triangle number to have over five divisors.
///  What is the value of the first triangle number to have over five hundred divisors?
public class P012_TriangularNumbers {

    static List<Long> factorsOf(long n) {
        List<Long> factors = new ArrayList<>();
        factors.add(1L);

        for (long i = 2; i < (long) Math.sqrt(n); i++) {
            if (n % i == 0) {
                factors.add(i);
                if (n / i != i) {
                    factors.add(i);
                }
            }
        }
        return factors;
    }

    public static void main(String[] args) {
        final Optional<Long> first = Stream.iterate(new long[]{1, 1}, n -> {
            long currSum = LongStream.rangeClosed(1, n[0] + 1).sum();
            long currCount = n[0] += 1;
            return new long[]{currCount, currSum};
        })
                .map(ns -> ns[1])
                .filter(n -> factorsOf(n).size() > 500)
                .findFirst();

        if (first.isPresent()) {
            System.out.println("triangular number with over 500 divisors is " + first.get());
        } else {
            System.out.println("no triangular number found");
        }
    }
}
